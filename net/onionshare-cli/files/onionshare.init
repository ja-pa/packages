#!/bin/sh /etc/rc.common

USE_PROCD=1
START=30

#extra_command "get_key" "Print probe public key (used for probe registration)"
#extra_command "probeid" "Show probe ID"
#extra_command "log" "Show status log"
#extra_command "create_backup" "Backup SSH key to .tar.gz"
#extra_command "load_backup" "Load backup SSH key from .tar.gz"

ONION_DIR=/etc/onionshare

print_msg() {
	echo "$1" >&2
	logger -t onionshare "$1"
}

safe_mkdir() {
    local dir="$1"
    if [ -e "$dir" ] && [ ! -d "$dir" -o -L "$dir" ]; then
        rm -rf "$dir"
    fi
    mkdir -p "$dir"
    chmod 700 "$dir"
    chown root:root "$dir"
}


onion_chat() {
 echo chat
}

onion_web() {
	local name="$1"
	local web_dir="$2"
	local pub="$3"
	local config_name="$ONION_DIR/$name.json"
	echo web

	procd_open_instance
	procd_set_param command "/usr/bin/onionshare-cli"
	procd_set_param stdout "$log_stdout"
	procd_set_param stderr "$log_stderr"

	#Public web without password
	if [ -f "$config_name" ]; then
		if [ "$pub" == "1" ]; then
			cat "$config_name" |jq ".general.public=true">$config_name.aaa
			mv $config_name.aaa $config_name
		else
			cat "$config_name" |jq ".general.public=false">$config_name.aaa
			mv $config_name.aaa $config_name
		fi
		
		web_dir_list="[\"$web_dir\"]"
		cat /etc/onionshare/custom_name.json |jq ".website.filenames=$web_dir_list">$config_name.aaa
		mv $config_name.aaa $config_name

	fi
	procd_append_param command --website $web_dir --persistent "$config_name"
	[ "$pub" = "1" ] && procd_append_param command --public
	procd_set_param pidfile "/var/run/onionshare/onionshare-$name.pid"
	procd_close_instance

}

onion_recv() {
 echo web 
}

onion_start() {
	local cfg="$1"

	config_get name "$cfg" name
	config_get_bool enabled "$cfg" enabled 0
	config_get desc "$cfg" description
	config_get mode "$cfg" mode 
	config_get auto_stop "$cfg" auto_stop 
	config_get auto_start "$cfg" auto_start 
	config_get_bool pub "$cfg" public
	config_get down_dir "$cfg" down_dir 
	config_get web_dir "$cfg" web_dir 
	config_get_bool autostop_sharing "$cfg" autostop_sharing
	config_get_bool persistent "$cfg" persistent

	echo "=============================="
        echo name  $name
        echo desc  $desc
        echo mode  $mode
        echo auto_stop  $auto_stop
        echo auto_start  $auto_start
        echo pub  $pub
        echo down_dir  $down_dir
        echo web_dir  $web_dir
        echo autostop_sharing  $autostop_sharing
        echo persistent  $persistent
	
	[ -z "$name" ] && echo "Empty name not allowed."
	[ "$enabled" = "1" ] || echo "Service $name not enabled."
	
	case "$mode" in
	website)
		if [ ! -d "$web_dir" ]; then
			echo "error $web_dir doesn't exists"
			return 1
		else
			onion_web "$name" "$web_dir" "$pub"
		fi
	;;
	recv)
	onion_recv
	;;
	chat)
	onion_chat
	;;
	*)
	echo "Uknown mode $mode"
	exit 1
	esac
}


start_service() {
	local log_stderr
	local log_stdout
	local rxtxrpt
	local test_setting

	mkdir -p /var/run/onionshare
	mkdir -p $ONION_DIR
	
	config_load onionshare
	config_foreach onion_start onionshare 
}

stop_service() {
	tor_onion_pid=$(pgrep -f /.config/onionshare/tmp/)
	kill $tor_onion_pid
}

