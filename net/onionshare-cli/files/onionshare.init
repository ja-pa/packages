#!/bin/sh /etc/rc.common

USE_PROCD=1
START=30

#extra_command "get_key" "Print probe public key (used for probe registration)"
#extra_command "probeid" "Show probe ID"
#extra_command "log" "Show status log"
#extra_command "create_backup" "Backup SSH key to .tar.gz"
#extra_command "load_backup" "Load backup SSH key from .tar.gz"


print_msg() {
	echo "$1" >&2
	logger -t atlas-sw-probe "$1"
}

safe_mkdir() {
    local dir="$1"
    if [ -e "$dir" ] && [ ! -d "$dir" -o -L "$dir" ]; then
        rm -rf "$dir"
    fi
    mkdir -p "$dir"
    chmod 700 "$dir"
    chown root:root "$dir"
}

create_tmp_dirs() {
	local dirs

	chown -R atlas:atlas "$SCRIPTS_DIR/bin"
	chmod 755 "$SCRIPTS_DIR/bin"
	dirs='crons data run status'

	safe_mkdir "$TMP_BASE_DIR"
	for i in $dirs;	do
		safe_mkdir "$TMP_BASE_DIR/$i"
	done
}

onion_chat() {
 echo chat
}

onion_web() {
 echo web 
}

onion_recv() {
 echo web 
}

onion_start() {
	local cfg="$1"

	config_get name "$cfg" name
	config_get desc "$cfg" description
	config_get mode "$cfg" mode 
	config_get auto_stop "$cfg" auto_stop 
	config_get auto_start "$cfg" auto_start 
	config_get_bool pub "$cfg" public
	config_get down_dir "$cfg" down_dir 
	config_get web_dir "$cfg" web_dir 
	config_get_bool autostop_sharing "$cfg" autostop_sharing
	config_get_bool persistent "$cfg" persistent

	echo "=============================="
        echo name  $name
        echo desc  $desc
        echo mode  $mode
        echo auto_stop  $auto_stop
        echo auto_start  $auto_start
        echo pub  $pub
        echo down_dir  $down_dir
        echo web_dir  $web_dir
        echo autostop_sharing  $autostop_sharing
        echo persistent  $persistent
	
	[ -z "$name" ] && echo "Empty name not allowed" && exit 1
	
	case "$mode" in
	website)
	onion_web
	;;
	recv)
	onion_recv
	;;
	chat)
	onion_chat
	;;
	*)
	echo "Uknown mode $mode"
	exit 1
	esac
}


start_service() {
	local log_stderr
	local log_stdout
	local rxtxrpt
	local test_setting

	#create_tmp_dirs

	#config_load atlas
	#config_get_bool log_stderr "common" log_stderr "0"
	#config_get_bool log_stdout "common" log_stdout "0"
	#config_get_bool rxtxrpt "common" rxtxrpt "1"
	#test_setting=$(grep "^[ 	]*RXTXRPT=yes" "$STATE_CONFIG")
	
	config_load onionshare
	config_foreach onion_start onionshare 

	#procd_open_instance
	#procd_set_param command "/usr/bin/onionshare-cli"
	#procd_set_param stdout "$log_stdout"
	#procd_set_param stderr "$log_stderr"
	#procd_append_param command --website / --persistent /testconf.txt
	#procd_set_param pidfile "/var/run/onionshare.pid"
	#procd_close_instance
}
